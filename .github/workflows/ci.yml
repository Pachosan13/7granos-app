name: CI

on:
  pull_request:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    # 🔐 Secrets disponibles para build y tests
    env:
      VITE_SHOW_SYNC_BUTTON: "1"   # ⬅️ clave para que aparezca el botón en CI
      VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
      VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      VITE_DEMO: 0

    steps:
      - uses: actions/checkout@v4

      # 1) Detecta carpeta de la app (primer package.json del repo)
      - name: Detect APP_PATH
        id: detect
        shell: bash
        run: |
          set -e
          APP_PATH="$(git ls-files **/package.json | head -n1 | xargs dirname || true)"
          if [ -z "$APP_PATH" ]; then
            echo "No se encontró package.json"; exit 1
          fi
          echo "APP_PATH=$APP_PATH" >> $GITHUB_ENV
          echo "App path: $APP_PATH"

      # 2) Node (sin cache agresivo para evitar paths obsoletos)
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            ${{ env.APP_PATH }}/package-lock.json
            ${{ env.APP_PATH }}/package.json

      # 3) Instala deps (usa ci si hay lockfile; si no, install)
      - name: Install deps
        working-directory: ${{ env.APP_PATH }}
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      # 4) Typecheck/Lint no bloqueantes
      - name: Typecheck (non-blocking)
        working-directory: ${{ env.APP_PATH }}
        run: npm run typecheck || true

      - name: Lint (non-blocking)
        working-directory: ${{ env.APP_PATH }}
        run: npm run lint || true

      # 5) Build tolerante (si no hay script build, no falla)
      - name: Build
        working-directory: ${{ env.APP_PATH }}
        run: |
          if npm pkg get scripts.build | grep -qv null; then
            # CI=false para que CRA/Vite no traten warnings como errores
            CI=false npm run build
          else
            echo "No build script; skipping"
          fi

      # 6) Playwright: instala browsers + deps y ejecuta SOLO si hay config
      - name: Check for Playwright config
        id: has_pw
        shell: bash
        working-directory: ${{ env.APP_PATH }}
        run: |
          if ls playwright.config.* >/dev/null 2>&1; then
            echo "found=true" >> $GITHUB_OUTPUT
          else
            echo "found=false" >> $GITHUB_OUTPUT
          fi

      - name: Install Playwright
        if: steps.has_pw.outputs.found == 'true'
        working-directory: ${{ env.APP_PATH }}
        run: npx playwright install --with-deps

      - name: Test (Playwright)
        if: steps.has_pw.outputs.found == 'true'
        working-directory: ${{ env.APP_PATH }}
        run: npx playwright test
