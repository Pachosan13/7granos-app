name: CI

on:
  pull_request:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      # Vars del frontend (se leen desde Secrets del repo)
      VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
      VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      # Flags para habilitar UI real en CI
      VITE_DEMO: "0"
      VITE_SHOW_SYNC_BUTTON: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Detecta automáticamente el primer package.json del repo
      - name: Detect APP_PATH
        id: detect
        shell: bash
        run: |
          set -e
          APP_PATH="$(git ls-files **/package.json | head -n1 | xargs dirname || true)"
          if [ -z "$APP_PATH" ]; then
            echo "No se encontró package.json"; exit 1
          fi
          echo "APP_PATH=$APP_PATH" >> "$GITHUB_ENV"
          echo "App path: $APP_PATH"

      # Node estable + cache
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20.11.1'
          cache: 'npm'
          cache-dependency-path: |
            **/package-lock.json

      - name: Print Node & npm
        run: |
          node -v
          npm -v
          npx -v

      # Instala dependencias
      - name: Install deps
        working-directory: ${{ env.APP_PATH }}
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      # Fix para binarios nativos de esbuild en Linux (no falla si no aplica)
      - name: Rebuild esbuild (verbose)
        working-directory: ${{ env.APP_PATH }}
        run: |
          npm rebuild esbuild --verbose || true
          node -e "console.log('esbuild version:', require('esbuild').version)"

      # Typecheck/Lint NO bloqueantes
      - name: Typecheck (non-blocking)
        working-directory: ${{ env.APP_PATH }}
        run: npm run typecheck || true

      - name: Lint (non-blocking)
        working-directory: ${{ env.APP_PATH }}
        run: npm run lint || true

      # Build con retry si falla por binario nativo
      - name: Build (retry on esbuild)
        working-directory: ${{ env.APP_PATH }}
        env:
          CI: "false"  # evita tratar warnings como errores en CRA/Vite
          NODE_OPTIONS: "--max-old-space-size=2048"
        run: |
          set -euxo pipefail
          npm run build || (npm rebuild esbuild --verbose && npm run build)

      # Playwright: instala browsers y corre pruebas, pero NO bloquea el merge
      - name: Install Playwright
        working-directory: ${{ env.APP_PATH }}
        run: npx playwright install --with-deps

      - name: Test (Playwright - non-blocking)
        working-directory: ${{ env.APP_PATH }}
        continue-on-error: true
        run: npx playwright test
