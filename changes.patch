From 33c4887cd234399ae6dfb06ec6b307001a35fc5d Mon Sep 17 00:00:00 2001
  From: Pacho tu-correo@loquesea.com (tu-correo@loquesea.com)
  Date: Fri, 17 Oct 2025 23:44:57 -0500
  Subject: [PATCH] fix: data sync & health diagnostics (dashboard, ventas,
  attendance)

  ———

  project/src/components/Layout.tsx             |  53 ++-
  project/src/lib/supabase.ts                   |  36 +-
  project/src/pages/Dashboard.tsx               | 323 +++++++++++---
  project/src/pages/VentasPage.tsx              | 157 +++++--
  project/src/pages/admin/AdminLayout.tsx       |  32 +-
  project/src/pages/admin/Health.tsx            | 405 ++++++++++++++++++
  project/src/pages/importar/Planilla.tsx       | 376 +++++++++++++++-
  .../services/fixtures/invu.movements.json |  34 ++
  project/src/services/invu.ts                  | 362 +++++++++++++++-
  project/src/utils/diagnostics.ts              |  76 ++++
  vercel.json                                   |   8 +
  11 files changed, 1733 insertions(+), 129 deletions(-)
  create mode 100644 project/src/pages/admin/Health.tsx
  create mode 100644 project/src/services/fixtures/invu.movements.json
  create mode 100644 project/src/utils/diagnostics.ts
  create mode 100644 vercel.json

  diff --git a/project/src/components/Layout.tsx b/project/src/components/Layout.tsx
  index c543f3c..bb82421 100644
  --- a/project/src/components/Layout.tsx
  +++ b/project/src/components/Layout.tsx
  @@ -1,12 +1,63 @@
  -import { useState } from 'react';
  +import { useEffect, useMemo, useState } from 'react';
  import { Header } from './Header';
  import { Sidebar } from './Sidebar';
  +import { pingSupabase } from '../lib/supabase';
  +import { formatFunctionsHost, getFunctionsBase, isDebug, logEnv } from '../utils/diagnostics';

  export const Layout = ({ children }: { children: React.ReactNode }) => {
  const [menuOpen, setMenuOpen] = useState(false);

  - const debugMode = isDebug();
  - const [supabasePing, setSupabasePing] = useState<{ ok: boolean; status: number; note: string } | null>(null);
  - const envSummary = useMemo(() => {
  - const supabaseUrlOk = Boolean(import.meta.env.VITE_SUPABASE_URL);
  - const supabaseAnonOk = Boolean(import.meta.env.VITE_SUPABASE_ANON_KEY);
  - const functionsBase = getFunctionsBase();
  - return {

  -
         supabaseUrlOk,

  -
         supabaseAnonOk,

  -
         functionsBase,

  -
         functionsHost: formatFunctionsHost(),

  -
         envOk: supabaseUrlOk && supabaseAnonOk && Boolean(functionsBase),
  - };
  - }, []);
  - useEffect(() => {
  - if (!debugMode) return;
  - logEnv();
  - let mounted = true;
  - pingSupabase()

  -
         .then(result => mounted && setSupabasePing(result))

  -
         .catch(err => {

  -
           if (mounted) {

  -
             setSupabasePing({

  -
               ok: false,

  -
               status: 0,

  -
               note: err instanceof Error ? err.message : 'Error inesperado en pingSupabase',

  -
             });

  -
           }

  -
         });
  - return () => {

  -
         mounted = false;
  - };
  - }, [debugMode]);

    return (
      <div className="min-h-screen bg-sand flex flex-col">

  -
         {debugMode && (

  -
           <div className="bg-amber-100 border-b border-amber-300 text-amber-900 text-sm px-4 py-2 flex flex-wrap items-center gap-3">

  -
             <strong>DEBUG MODE</strong>

  -
             <span>

  -
               Entorno: {envSummary.envOk ? 'ok' : 'faltan variables (revisa VITE_SUPABASE_URL / VITE_SUPABASE_ANON_KEY)'}

  -
             </span>

  -
             <span>

  -
               Supabase ping:{' '}

  -
               {supabasePing

  -
                 ? `${supabasePing.ok ? 'ok' : 'falló'} (status ${supabasePing.status || 'n/a'}) — ${supabasePing.note}`

  -
                 : 'verificando…'}

  -
             </span>

  -
             <span>Functions: {envSummary.functionsHost}</span>

  -
           </div>

  -
         )}
         <Header onToggleMenu={() => setMenuOpen((v) => !v)} />
         <div className="flex flex-1">
           <Sidebar open={menuOpen} onClose={() => setMenuOpen(false)} />

  diff --git a/project/src/lib/supabase.ts b/project/src/lib/supabase.ts
  index 0feb35f..5aeaaae 100644
  --- a/project/src/lib/supabase.ts
  +++ b/project/src/lib/supabase.ts
  @@ -19,4 +19,38 @@ export const supabase = createClient(
  detectSessionInUrl: true,
  },
  }
  -);
  \ No newline at end of file
  +);
  +
  +type PingResult = { ok: boolean; status: number; note: string };
  +
  +export async function pingSupabase(): Promise<PingResult> {

  - try {
  - if (!isSupabaseConfigured) {

  -
         return { ok: false, status: 0, note: 'Supabase no está configurado en el cliente' };
  - }
  - const { error, status, count } = await supabase

  -
         .from('invu_ventas')

  -
         .select('fecha', { count: 'exact', head: true })

  -
         .limit(1);
  - if (error) {

  -
         return {

  -
           ok: false,

  -
           status: status ?? 0,

  -
           note: error.message || 'Error desconocido al consultar invu_ventas',

  -
         };
  - }
  - return {

  -
         ok: true,

  -
         status: status ?? 200,

  -
         note: typeof count === 'number' ? `count=${count}` : 'Consulta exitosa',
  - };
  - } catch (err) {
  - return {

  -
         ok: false,

  -
         status: 0,

  -
         note: err instanceof Error ? err.message : 'Error inesperado en pingSupabase',
  - };
  - }
    +}
    diff --git a/project/src/pages/Dashboard.tsx b/project/src/pages/Dashboard.tsx
    index 96100a7..c68690a 100644
    --- a/project/src/pages/Dashboard.tsx
    +++ b/project/src/pages/Dashboard.tsx
    @@ -1,4 +1,4 @@
    -import { useState, useEffect, useCallback } from 'react';
    +import { useState, useEffect, useCallback, useMemo } from 'react';
    import { useNavigate } from 'react-router-dom';
    import { motion } from 'framer-motion';
    import {
    @@ -16,6 +16,7 @@ import { RealtimeStatusIndicator } from '../components/RealtimeStatusIndicator';
    import { supabase } from '../lib/supabase';
    import { formatCurrencyUSD, formatDateDDMMYYYY } from '../lib/format';
    import { useRealtimeVentas } from '../hooks/useRealtimeVentas';
    +import { debugLog, getFunctionsBase } from '../utils/diagnostics';

  // Helpers
  const usd = (v: number) => formatCurrencyUSD(Number(v || 0));
  @@ -55,6 +56,18 @@ export const Dashboard = () => {
  lastSyncTime: null as Date | null,
  syncMessage: null as string | null,
  });

  - const functionsBase = useMemo(() => getFunctionsBase(), []);
  - const registerAlert = useCallback((alert: any) => {
  - setAlerts(prev => {

  -
         const filtered = prev.filter((item: any) => item.id !== alert.id);

  -
         return [...filtered, alert];
  - });
  - }, []);
  - const clearAlert = useCallback((id: string) => {
  - setAlerts(prev => prev.filter((item: any) => item.id !== id));
  - }, []);

    const selectedIds = useCallback(() => {
    return sucursalFiltro === 'todas'
    @@ -84,12 +97,13 @@ export const Dashboard = () => {
    const totalTrans = ventasHoy.length;

        const now = new Date();


  -
         const { data: planillaData } = await supabase


  -
         const { data: planillaData, error: planillaError } = await supabase
           .from('hr_periodo_totales')
           .select('total_costo_laboral, hr_periodo!inner(periodo_mes, periodo_ano, sucursal_id)')
           .eq('hr_periodo.periodo_mes', now.getMonth() + 1)
           .eq('hr_periodo.periodo_ano', now.getFullYear())
           .in('hr_periodo.sucursal_id', selectedIds());

  -
         if (planillaError) throw planillaError;

         const costoLaboral = (planillaData ?? []).reduce((s, p) => s + Number(p.total_costo_laboral || 0), 0);
         setKpis({

  @@ -99,10 +113,18 @@ export const Dashboard = () => {
  planillaActiva: costoLaboral,
  utilidadBruta: totalVentas * 0.65,
  });


  -
         clearAlert('kpi-error');
    } catch (err) {


  -
         console.error('[loadKPIs]', err);


  -
         debugLog('[Dashboard] loadKPIs error', err);

  -
         registerAlert({

  -
           id: 'kpi-error',

  -
           type: 'error',

  -
           title: 'Error cargando KPIs',

  -
           message: 'No fue posible leer ventas/planilla. Revisa la conexión a Supabase.',

  -
           icon: AlertTriangle,

  -
         });
    }

  - }, [selectedIds, sucursales]);

  - }, [clearAlert, registerAlert, selectedIds, sucursales]);

    // === Ventas 30 días ===
    const loadVentasDiarias = useCallback(async () => {
    @@ -110,72 +132,116 @@ export const Dashboard = () => {
    since.setDate(since.getDate() - 30);
    [patch truncated intentionally for brevity]
