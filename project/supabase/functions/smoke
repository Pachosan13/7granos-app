// supabase/functions/smoke/index.ts
import { serve } from "https://deno.land/std@0.224.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";

serve(async (req) => {
  try {
    const url = new URL(req.url);
    const mode = url.searchParams.get("mode") ?? "probe";

    // Esta funci√≥n NO exige JWT; si quieres, descomenta el check:
    // const auth = req.headers.get("authorization") ?? "";
    // if (!auth.toLowerCase().startsWith("bearer ")) return j({ok:false,error:"no auth"},401);

    const SUPABASE_URL = Deno.env.get("SUPABASE_URL");
    const SERVICE_ROLE  = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY");

    if (mode === "diag") {
      return j({
        ok: true,
        mode,
        has_SUPABASE_URL: !!SUPABASE_URL,
        has_SUPABASE_SERVICE_ROLE_KEY: !!SERVICE_ROLE,
      });
    }

    if (!SUPABASE_URL || !SERVICE_ROLE) {
      return j({ ok:false, error:"faltan SUPABASE_URL/SUPABASE_SERVICE_ROLE_KEY" }, 500);
    }

    const sb = createClient(SUPABASE_URL, SERVICE_ROLE, {
      auth: { persistSession: false },
    });

    // probe: SELECT sin tocar datos
    const { error: probeErr } = await sb.from("ventas").select("id", { count:"exact", head:true }).limit(1);
    if (probeErr) return j({ ok:false, step:"probe", error: probeErr.message ?? probeErr }, 500);

    return j({ ok:true, mode, note:"probe ok" });
  } catch (e) {
    return j({ ok:false, error: String(e) }, 500);
  }
});

function j(body: unknown, status=200) {
  return new Response(JSON.stringify(body), { status, headers: { "Content-Type":"application/json" }});
}
