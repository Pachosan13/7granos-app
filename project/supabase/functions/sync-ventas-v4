import { serve } from "https://deno.land/std@0.224.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";

const SF_UUID = "1918f8f7-9b5d-4f6a-9b53-a953f82b71ad";
const TEST_WRITE = true;

serve(async (req) => {
  const t0 = Date.now();
  try {
    // Requiere Authorization
    const auth = req.headers.get("authorization") ?? "";
    if (!auth.toLowerCase().startsWith("bearer ")) {
      return j({ ok:false, error:"Missing/invalid Authorization header" }, 401);
    }

    // Params
    const u = new URL(req.url);
    const sucursal = u.searchParams.get("sucursal") ?? "";
    const desde = u.searchParams.get("desde") ?? "";
    const hasta = u.searchParams.get("hasta") ?? "";
    if (!sucursal || !desde || !hasta) {
      return j({ ok:false, error:"Faltan parámetros sucursal|desde|hasta" }, 400);
    }
    if (sucursal !== "sf") {
      return j({ ok:false, error:"Solo SF tiene token vigente" }, 401);
    }

    // Supabase (Service Role)
    const SUPABASE_URL = Deno.env.get("SUPABASE_URL");
    const SERVICE_ROLE = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY");
    if (!SUPABASE_URL || !SERVICE_ROLE) {
      return j({ ok:false, error:"Faltan SUPABASE_URL/SUPABASE_SERVICE_ROLE_KEY" }, 500);
    }
    const sb = createClient(SUPABASE_URL, SERVICE_ROLE, {
      auth: { persistSession: false },
      global: { headers: { "X-Client-Info": "sync-ventas-v4" } },
    });

    let insertedVentas = 0, insertedDetalle = 0;

    if (TEST_WRITE) {
      // ===== INSERT EN ventas (SIN 'estado') =====
      // columnas existentes: sucursal_id (uuid, NOT NULL), fecha (date, NOT NULL),
      // total (numeric, NOT NULL), propinas/itbms/num_transacciones/origen/created_at (opcionales)
      const venta = {
        sucursal_id: SF_UUID,
        fecha: desde,           // 'YYYY-MM-DD' -> casteable a date
        total: 12.34,
        origen: "edge",         // opcional, existe en tu schema
      };
      const { error: e1 } = await sb.from("ventas").insert(venta);
      if (e1) {
        return j({ ok:false, step:"ventas", error:e1.message ?? e1 }, 500);
      }
      insertedVentas++;

      // ===== INSERT EN ventas_detalle (idorden es NOT NULL) =====
      // esquema que pasaste: idorden (NOT NULL), sucursal_id, fecha_cierre (timestamptz),
      // estado, subtotal, itbms, total, metodo_pago, monto_pago, cliente_nombre, raw, created_at
      const detalle = {
        idorden: crypto.randomUUID(),
        sucursal_id: SF_UUID,
        fecha_cierre: `${desde}T12:05:00Z`, // timestamptz válido
        estado: "completado",
        subtotal: 12.34,
        itbms: 0,
        total: 12.34,
      };
      const { error: e2 } = await sb.from("ventas_detalle").insert(detalle);
      if (e2) {
        // Fallback a created_at por si fecha_cierre diera problema
        const detalleFallback = {
          idorden: crypto.randomUUID(),
          sucursal_id: SF_UUID,
          created_at: new Date().toISOString(),
          estado: "completado",
          subtotal: 12.34,
          itbms: 0,
          total: 12.34,
        };
        const { error: e2b } = await sb.from("ventas_detalle").insert(detalleFallback);
        if (e2b) {
          return j({ ok:false, step:"ventas_detalle", error:e2b.message ?? e2b }, 500);
        }
      } else {
        insertedDetalle++;
      }
    }

    return j({
      ok: true,
      note: TEST_WRITE ? "Escritura de prueba realizada" : "Dry-run",
      sucursal, desde, hasta,
      insertedVentas, insertedDetalle,
      ms: Date.now() - t0,
    });
  } catch (err) {
    return j({ ok:false, error:String(err) }, 500);
  }
});

function j(body: unknown, status = 200) {
  return new Response(JSON.stringify(body), {
    status,
    headers: { "Content-Type": "application/json; charset=utf-8" },
  });
}
