// Edge Function: sync-empleados (v4 – robusta + diagnóstico)

import "jsr:@supabase/functions-js/edge-runtime.d.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";

const SUPABASE_URL = Deno.env.get("SUPABASE_URL")!;
const SERVICE_ROLE = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY")!;
const INVU_TOKENS_JSON = Deno.env.get("INVU_TOKENS_JSON") ?? "{}";
const INVU_CREDENTIALS_JSON = Deno.env.get("INVU_CREDENTIALS_JSON") ?? "{}";
const INVU_BASE_RAW =
  Deno.env.get("INVU_BASE_URL") ?? "https://api6.invupos.com/invuApiPos/index.php";

// builder para soportar valores con /index.php y con/ sin '?r='
function buildUrl(pathWithQuery: string) {
  const hasR = INVU_BASE_RAW.includes("?r=");
  const base = INVU_BASE_RAW.replace(/\/$/, "");
  const rest = pathWithQuery.replace(/^\?r=|^\/|^r=/, "");
  return hasR ? `${base}${rest.startsWith("empleados/") ? "" : ""}${rest}`
              : `${base}?r=${rest}`;
}

const supa = createClient(SUPABASE_URL, SERVICE_ROLE, { auth: { persistSession: false } });

function json(data: unknown, status = 200) {
  return new Response(JSON.stringify(data), {
    status,
    headers: { "content-type": "application/json; charset=utf-8" },
  });
}

async function getTokenForSucursal(sucursal_id: string): Promise<string | null> {
  const tokens = JSON.parse(INVU_TOKENS_JSON || "{}");
  if (tokens[sucursal_id]?.token) return tokens[sucursal_id].token as string;

  // opción B: credenciales -> pedir token
  const creds = JSON.parse(INVU_CREDENTIALS_JSON || "{}");
  const c = creds[sucursal_id];
  if (!c?.username || !c?.password) return null;

  const res = await fetch(buildUrl("userAuth"), {
    method: "POST",
    headers: { accept: "application/json", "content-type": "application/json" },
    body: JSON.stringify({
      grant_type: "authorization",
      username: c.username,
      password: c.password,
    }),
  });
  if (!res.ok) return null;
  const body = await res.json().catch(() => ({} as any));
  return body?.authorization ?? null;
}

type RawEmpleado = {
  id: number;
  nombres?: string;
  apellidos?: string;
  identificacion?: string | null;
  email?: string | null;
  movimientos?: unknown[];
};

function normalize(raw: RawEmpleado[], sucursal_id: string) {
  const out = [];
  for (const e of raw) {
    if (!e || typeof e.id !== "number") continue;
    if (e.id === 0) continue; // ignora Default
    const nombre = [e.nombres, e.apellidos].filter(Boolean).join(" ").trim();
    if (!nombre) continue;
    out.push({
      sucursal_id,
      invu_employee_id: String(e.id),
      nombre,
      email: e.email ?? null,
      last_synced_at: new Date().toISOString(),
    });
  }
  return out;
}

Deno.serve(async (req) => {
  try {
    if (req.method !== "POST") return json({ error: "Only POST" }, 405);
    const body = await req.json().catch(() => ({}));
    const sucursal_id = body?.sucursal_id as string | undefined;
    const dry_run = !!body?.dry_run;
    const debug = !!body?.debug;
    const force = (body?.force as "mov" | "emp" | undefined) || undefined;

    if (!sucursal_id) return json({ ok: false, error: "Falta sucursal_id" }, 400);

    const token = await getTokenForSucursal(sucursal_id);
    if (!token) {
      return json({ ok: false, error: `No hay token/credenciales para sucursal_id=${sucursal_id}` }, 400);
    }

    const headers = { accept: "application/json", AUTHORIZATION: token };

    // A) movimientos (rango amplio)
    const start = 1609459200; // 2021-01-01
    const end = Math.floor(Date.now() / 1000);
    const urlMov = buildUrl(`empleados/movimientos/fini/${start}/ffin/${end}`);

    // B) catálogo empleados
    const urlEmp = buildUrl("empleados/empleados");

    let source: "mov" | "emp" = "mov";
    let raw: any = null;

    if (force !== "emp") {
      const r = await fetch(urlMov, { headers });
      if (r.ok) raw = await r.json();
      if (!Array.isArray(raw?.data) || raw.data.length === 0) raw = null;
    }

    if (!raw) {
      const r2 = await fetch(urlEmp, { headers });
      // algunos tenants devuelven 400 con {error:true}, lo toleramos
      if (r2.ok) {
        const t = await r2.text();
        try {
          raw = JSON.parse(t);
          source = "emp";
        } catch {
          raw = null;
        }
      }
    }

    const arr: RawEmpleado[] = Array.isArray(raw?.data) ? raw.data : [];
    const upserts = normalize(arr, sucursal_id);

    if (dry_run) {
      return json({
        ok: true,
        sucursal_id,
        source,
        total_raw: arr.length,
        preview: upserts.slice(0, 5),
      });
    }

    if (upserts.length === 0) {
      return json({
        ok: true,
        sucursal_id,
        source,
        total_raw: arr.length,
        upserted: 0,
        note: "Sin registros válidos para upsert",
      });
    }

    const { error } = await supa
      .from("hr_empleado")
      .upsert(upserts, { onConflict: "sucursal_id,invu_employee_id" });

    if (error) return json({ ok: false, error: error.message }, 500);

    return json({
      ok: true,
      sucursal_id,
      source,
      total_raw: arr.length,
      upserted: upserts.length,
      sample: upserts.slice(0, 5),
    });
  } catch (e: any) {
    return json({ ok: false, error: e?.message || String(e) }, 500);
  }
});
