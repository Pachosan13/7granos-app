// Edge Function: sync-empleados (robusta con fallback)
// 1) Intenta empleados/movimientos (v6).
// 2) Si viene vacío, usa empleados/empleados (catálogo).
// 3) Upsert por (sucursal_id, invu_employee_id).
// 4) Devuelve conteo y un sample para inspección rápida.

import "jsr:@supabase/functions-js/edge-runtime.d.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";

const SUPABASE_URL = Deno.env.get("SUPABASE_URL")!;
const SERVICE_ROLE = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY")!;
const INVU_TOKENS_JSON = Deno.env.get("INVU_TOKENS_JSON") ?? "{}";
const INVU_BASE_URL =
  Deno.env.get("INVU_BASE_URL") ?? "https://api6.invupos.com/invuApiPos/index.php";

const supa = createClient(SUPABASE_URL, SERVICE_ROLE, {
  auth: { persistSession: false },
});

function j(data: unknown, status = 200) {
  return new Response(JSON.stringify(data), {
    status,
    headers: { "content-type": "application/json; charset=utf-8" },
  });
}

type EmpleadoINVU = {
  id?: number | string;
  nombres?: string | null;
  apellidos?: string | null;
  email?: string | null;
};

function normalize(sucursal_id: string, list: EmpleadoINVU[]) {
  const now = new Date().toISOString();
  return list
    .map((e) => {
      const invuId = e?.id == null ? null : String(e.id);
      const nombre =
        [e?.nombres, e?.apellidos].filter(Boolean).join(" ").trim() || null;
      return {
        sucursal_id,
        invu_employee_id: invuId,
        nombre,
        email: e?.email ?? null,
        activo: true,
        last_synced_at: now,
      };
    })
    .filter((r) => r.invu_employee_id && r.nombre);
}

async function fetchJSON(url: string, token: string) {
  const res = await fetch(url, {
    headers: { AUTHORIZATION: token, accept: "application/json" },
  });
  const text = await res.text();
  let json: any = null;
  try {
    json = JSON.parse(text);
  } catch {
    // keep text for diagnostics
  }
  return { ok: res.ok, status: res.status, text, json };
}

Deno.serve(async (req) => {
  try {
    if (req.method !== "POST") return j({ error: "Only POST" }, 405);

    const { sucursal_id } = await req.json();
    if (!sucursal_id) return j({ ok: false, error: "Falta sucursal_id" }, 400);

    const tokens = JSON.parse(INVU_TOKENS_JSON);
    const token: string | undefined = tokens[sucursal_id]?.token;
    if (!token) return j({ ok: false, error: `No hay token para sucursal_id=${sucursal_id}` }, 400);

    // 1) Intento por movimientos
    const start_date = 1609459200; // 2021-01-01
    const end_date = Math.floor(Date.now() / 1000);
    const urlMov = `${INVU_BASE_URL}?r=empleados/movimientos/fini/${start_date}/ffin/${end_date}`;
    const mov = await fetchJSON(urlMov, token);

    let empleados: EmpleadoINVU[] = Array.isArray(mov.json?.data) ? mov.json.data : [];

    // 2) Fallback a catálogo si viene vacío
    let urlUsed = urlMov;
    if (!empleados.length) {
      const urlCat = `${INVU_BASE_URL}?r=empleados/empleados&limit=500`;
      const cat = await fetchJSON(urlCat, token);
      urlUsed = urlCat;

      if (!cat.ok) {
        return j({
          ok: false,
          step: "catalog",
          status: cat.status,
          error: cat.text,
          urlUsed,
          base: INVU_BASE_URL,
        }, 502);
      }
      empleados = Array.isArray(cat.json?.data) ? cat.json.data : [];
    }

    const rows = normalize(sucursal_id, empleados);
    if (!rows.length) {
      return j({
        ok: true,
        sucursal_id,
        upserted: 0,
        urlUsed,
        base: INVU_BASE_URL,
        note: "Sin empleados o normalización vacía",
      });
    }

    const { error } = await supa
      .from("hr_empleado")
      .upsert(rows, { onConflict: "sucursal_id,invu_employee_id" });

    if (error) return j({ ok: false, error: error.message, urlUsed, base: INVU_BASE_URL }, 500);

    // muestra un sample para ver que realmente entraron nombres/ids
    const sample = rows.slice(0, 5).map((r) => ({ invu_employee_id: r.invu_employee_id, nombre: r.nombre }));

    return j({ ok: true, sucursal_id, upserted: rows.length, urlUsed, base: INVU_BASE_URL, sample });
  } catch (err: any) {
    return j({ ok: false, error: err?.message ?? String(err) }, 500);
  }
});
