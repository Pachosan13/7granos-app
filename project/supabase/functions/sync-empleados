// Edge Function: sync-empleados
// Sincroniza empleados desde INVU usando endpoint v6 (movimientos)

import "jsr:@supabase/functions-js/edge-runtime.d.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";

const SUPABASE_URL = Deno.env.get("SUPABASE_URL")!;
const SERVICE_ROLE = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY")!;
const INVU_TOKENS_JSON = Deno.env.get("INVU_TOKENS_JSON") ?? "{}";

// ✅ IMPORTANTE: base correcta
const INVU_BASE_URL =
  Deno.env.get("INVU_BASE_URL") ??
  "https://api6.invupos.com/invuApiPos/index.php?r=";

const supa = createClient(SUPABASE_URL, SERVICE_ROLE, {
  auth: { persistSession: false },
});

function response(data: unknown, status = 200) {
  return new Response(JSON.stringify(data), {
    status,
    headers: { "content-type": "application/json; charset=utf-8" },
  });
}

Deno.serve(async (req) => {
  try {
    if (req.method !== "POST") return response({ error: "Only POST" }, 405);

    const { sucursal_id } = await req.json();
    if (!sucursal_id) return response({ ok: false, error: "Falta sucursal_id" }, 400);

    const tokens = JSON.parse(INVU_TOKENS_JSON);
    const token = tokens[sucursal_id]?.token;
    if (!token)
      return response(
        { ok: false, error: `No hay token para sucursal_id=${sucursal_id}` },
        400,
      );

    // ✅ Endpoint correcto confirmado en tu prueba
    const start_date = 1609459200; // 2021-01-01 (broad range)
    const end_date = Math.floor(Date.now() / 1000); // ahora
    const url = `${INVU_BASE_URL}empleados/movimientos/fini/${start_date}/ffin/${end_date}`;

    const invuRes = await fetch(url, {
      headers: {
        AUTHORIZATION: token,
        accept: "application/json",
      },
    });

    const text = await invuRes.text();
    if (!invuRes.ok) {
      return response(
        {
          ok: false,
          error: `INVU empleados ${invuRes.status}: ${text}`,
        },
        502,
      );
    }

    const parsed = JSON.parse(text);
    const empleados = Array.isArray(parsed?.data) ? parsed.data : [];

    if (!empleados.length) {
      return response({ ok: true, sucursal_id, upserted: 0, note: "Sin empleados" });
    }

    const upserts = empleados.map((e: any) => ({
      sucursal_id,
      invu_employee_id: String(e.id),
      nombre: [e.nombres, e.apellidos].filter(Boolean).join(" ").trim(),
      email: e.email ?? null,
      last_synced_at: new Date().toISOString(),
    }));

    const { error: upErr } = await supa
      .from("hr_empleado")
      .upsert(upserts, { onConflict: "sucursal_id,invu_employee_id" });

    if (upErr) return response({ ok: false, error: upErr.message }, 500);

    return response({
      ok: true,
      sucursal_id,
      upserted: upserts.length,
    });
  } catch (err) {
    return response({ ok: false, error: (err as Error).message }, 500);
  }
});
