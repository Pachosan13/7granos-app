import "jsr:@supabase/functions-js/edge-runtime.d.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";

// Env
const SUPABASE_URL = Deno.env.get("SUPABASE_URL")!;
const SERVICE_ROLE = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY")!;
const INVU_BASE_ROOT = (Deno.env.get("INVU_BASE_URL") ?? "https://api6.invupos.com/invuApiPos/index.php").replace(/\/$/, "");
const INVU_ROOT = INVU_BASE_ROOT.replace(/\/index\.php$/, "");
const CREDS_JSON = Deno.env.get("INVU_CREDENTIALS_JSON") ?? "{}";

const supa = createClient(SUPABASE_URL, SERVICE_ROLE, { auth: { persistSession: false } });

type CredsMap = Record<string, { username: string; password: string }>;
function J(data: unknown, status = 200) { return new Response(JSON.stringify(data), { status, headers: { "content-type": "application/json; charset=utf-8" } }); }
function safeParse<T>(x: string, fb: T): T { try { return JSON.parse(x) as T; } catch { return fb; } }

async function userAuth(sucursalId: string) {
  const creds: CredsMap = safeParse(CREDS_JSON, {});
  const c = creds[sucursalId];
  if (!c?.username || !c?.password) throw new Error(`No hay credenciales para sucursal ${sucursalId}`);
  const res = await fetch(`${INVU_ROOT}/userAuth`, {
    method: "POST",
    headers: { accept: "application/json", "content-type": "application/json" },
    body: JSON.stringify({ grant_type: "authorization", username: c.username, password: c.password }),
  });
  const text = await res.text();
  if (!res.ok) throw new Error(`userAuth ${res.status}: ${text}`);
  const json = safeParse(text, {} as any);
  const token = json?.authorization as string | undefined;
  if (!token) throw new Error(`userAuth sin authorization: ${text}`);
  return token;
}

Deno.serve(async (req) => {
  try {
    if (req.method !== "POST") return J({ error: "Only POST" }, 405);
    const body = safeParse(await req.text(), {} as any);
    const sucursal_id: string | undefined = body?.sucursal_id;
    const dry_run = Boolean(body?.dry_run);
    const debug = Boolean(body?.debug);

    if (!sucursal_id) return J({ ok: false, error: "Falta sucursal_id" }, 400);

    // 1) token fresco SIEMPRE
    const token = await userAuth(sucursal_id);

    // 2) SOLO MOVIMIENTOS (ya verificado que devuelve data para ti)
    const start = 1609459200, end = 1893456000; // 2021..2030
    const url = `${INVU_BASE_ROOT}?r=empleados/movimientos/fini/${start}/ffin/${end}`;
    const res = await fetch(url, { headers: { accept: "application/json", AUTHORIZATION: token } });
    const text = await res.text();

    if (debug) console.log("GET", url, res.status, text.slice(0, 300));

    if (!res.ok) return J({ ok: false, step: "movimientos", status: res.status, body: text.slice(0, 600) }, 502);

    const json = safeParse(text, {} as any);
    const arr = Array.isArray(json?.data) ? json.data : [];

    // 3) Normaliza empleados a partir de "data"
    // INVU entrega { id, nombres, apellidos, ... , movimientos: [] }
    const nowIso = new Date().toISOString();
    const rows = arr
      .map((e: any) => {
        const id = e?.id;
        if (id == null) return null;
        const nombre = [e?.nombres, e?.apellidos].filter(Boolean).join(" ").trim() || null;
        return {
          sucursal_id,
          invu_employee_id: String(id),
          nombre,
          email: e?.email ?? null,
          activo: true,
          last_synced_at: nowIso,
        };
      })
      .filter(Boolean) as Array<{
        sucursal_id: string; invu_employee_id: string; nombre: string | null; email: string | null; activo: boolean; last_synced_at: string;
      }>;

    if (dry_run) {
      return J({
        ok: true,
        sucursal_id,
        debug: { url, status: res.status, count: rows.length, sample: rows.slice(0, 3) },
      });
    }

    if (rows.length === 0) {
      return J({ ok: true, sucursal_id, inserted: 0, note: "movimientos devolvi√≥ 0 empleados" });
    }

    const { error } = await supa.from("hr_empleado")
      .upsert(rows, { onConflict: "sucursal_id,invu_employee_id" });

    if (error) return J({ ok: false, error: error.message }, 500);

    return J({ ok: true, sucursal_id, inserted: rows.length });
  } catch (err) {
    return J({ ok: false, error: (err as Error).message }, 500);
  }
});
