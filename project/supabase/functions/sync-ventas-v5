// sync-ventas-v5/index.ts
import { serve } from "https://deno.land/std@0.224.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";

const SF_UUID = "1918f8f7-9b5d-4f6a-9b53-a953f82b71ad";

serve(async (req) => {
  try {
    const url = new URL(req.url);
    const mode = url.searchParams.get("mode") ?? "ping";
    const sucursal = url.searchParams.get("sucursal") ?? "";
    const desde = url.searchParams.get("desde") ?? "";
    const hasta = url.searchParams.get("hasta") ?? "";

    const SUPABASE_URL = Deno.env.get("SUPABASE_URL");
    const SERVICE_ROLE = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY");

    if (mode === "ping") {
      return j({ ok: true, now: new Date().toISOString() });
    }

    if (mode === "diag") {
      return j({
        ok: true,
        mode,
        has_SUPABASE_URL: !!SUPABASE_URL,
        has_SUPABASE_SERVICE_ROLE_KEY: !!SERVICE_ROLE,
      });
    }

    if (!SUPABASE_URL || !SERVICE_ROLE) {
      return j({ ok: false, error: "faltan SUPABASE_URL/SUPABASE_SERVICE_ROLE_KEY" }, 500);
    }

    const sb = createClient(SUPABASE_URL, SERVICE_ROLE, { auth: { persistSession: false } });

    // Probe conexión (no toca datos)
    {
      const { error: probeErr } = await sb
        .from("ventas")
        .select("id", { head: true, count: "exact" })
        .limit(1);
      if (probeErr) return j({ ok: false, step: "probe", error: probeErr.message ?? probeErr }, 500);
    }

    if (mode === "insert") {
      if (!sucursal || !desde || !hasta) {
        return j({ ok: false, error: "Faltan parámetros sucursal|desde|hasta" }, 400);
      }
      if (sucursal !== "sf") {
        return j({ ok: false, error: "Solo SF tiene token vigente" }, 401);
      }

      // === INSERT en ventas (tu schema NO tiene 'estado')
      const venta = {
  sucursal_id: SF_UUID,
  fecha: desde,
  total: 12.34,
  origen: "csv" // <- valor permitido por el CHECK
};
      const { error: e1 } = await sb.from("ventas").insert(venta);
      if (e1) return j({ ok: false, step: "ventas", error: e1.message ?? e1 }, 500);

      // === INSERT en ventas_detalle (idorden es NOT NULL)
      const detalle = {
        idorden: crypto.randomUUID(),
        sucursal_id: SF_UUID,
        fecha_cierre: `${desde}T12:00:00Z`, // timestamptz
        estado: "completado",
        subtotal: 12.34,
        itbms: 0,
        total: 12.34,
      };
      const { error: e2 } = await sb.from("ventas_detalle").insert(detalle);
      if (e2) {
        // fallback si falla fecha_cierre
        const det2 = {
          idorden: crypto.randomUUID(),
          sucursal_id: SF_UUID,
          created_at: new Date().toISOString(),
          estado: "completado",
          subtotal: 12.34,
          itbms: 0,
          total: 12.34,
        };
        const { error: e2b } = await sb.from("ventas_detalle").insert(det2);
        if (e2b) return j({ ok: false, step: "ventas_detalle", error: e2b.message ?? e2b }, 500);
      }

      return j({ ok: true, mode, note: "Escritura de prueba completada", sucursal, desde, hasta });
    }

    // default
    return j({ ok: true, mode, note: "usa ?mode=ping|diag|insert" });
  } catch (e) {
    return j({ ok: false, error: String(e) }, 500);
  }
});

function j(body: unknown, status = 200) {
  return new Response(JSON.stringify(body), {
    status,
    headers: { "Content-Type": "application/json" },
  });
}
